/**
 * Spaces can be used to modify the spacing between objects. The class
 * names have the format (type)(sides)(space), resulting in classes like
 * .pvs (padding, vertical, small), .mhl (margin, horizontal, large), etc.
 *
 * p, m = padding, margin
 * a, t, r, b, l, h, v = all, top, right, bottom, left, horizontal, vertical
 * x, s, m, l, h = spaces
 *
 * n - No space
 * x - Extra small space
 * s - Small space
 * m - Medium space
 * l - Large space
 * h - Huge space
 */

// These default spaces can be overridden in your own config file
$space-x:  5px!default;
$space-s: 10px!default;
$space-m: 20px!default;
$space-l: 40px!default;
$space-h: 80px!default;

// If you need more or different kinds of spaces, override the $spaces
// list. This is a list of lists, simulating key-value pairs in Sass.
$spaces: (
  "n" 0,
  "x" $space-x,
  "s" $space-s,
  "m" $space-m,
  "l" $space-l,
  "h" $space-h
)!default;

// Generate the CSS class names. This could be put into further loops,
// but the way it's done here strikes a good balance between automation
// (adding more spaces) vs. readability.

@mixin spaces() {
  @each $name-space-pair in $spaces {
    $name:  nth($name-space-pair, 1);
    $space: nth($name-space-pair, 2);
    $sides: t top, r right, b bottom, l left;

    .pt#{$name}, .pv#{$name}, .pa#{$name} {
      padding-top: $space !important;
    }

    .pr#{$name}, .ph#{$name}, .pa#{$name} {
      padding-right: $space !important;
    }

    .pb#{$name}, .pv#{$name}, .pa#{$name} {
      padding-bottom: $space !important;
    }

    .pl#{$name}, .ph#{$name}, .pa#{$name} {
      padding-left: $space !important;
    }

    .mt#{$name}, .mv#{$name}, .ma#{$name} {
      margin-top: $space !important;
    }

    .mr#{$name}, .mh#{$name}, .ma#{$name} {
      margin-right: $space !important;
    }

    .mb#{$name}, .mv#{$name}, .ma#{$name} {
      margin-bottom: $space !important;
    }

    .ml#{$name}, .mh#{$name}, .ma#{$name} {
      margin-left: $space !important;
    }
  }
}
